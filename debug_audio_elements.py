#!/usr/bin/env python3
"""
Script de debug para identificar problemas com elementos de √°udio na interface SparkOne.
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException


def setup_driver():
    """Configura o driver do Chrome com op√ß√µes otimizadas."""
    options = Options()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    # Permitir acesso ao microfone para testes
    options.add_argument("--use-fake-ui-for-media-stream")
    options.add_argument("--use-fake-device-for-media-stream")
    
    return webdriver.Chrome(options=options)


def login_to_sparkone(driver, base_url="http://localhost:8000"):
    """Faz login no SparkOne."""
    print("üîê Fazendo login no SparkOne...")
    
    try:
        # Navegar para p√°gina de login
        driver.get(f"{base_url}/web/login")
        wait = WebDriverWait(driver, 15)
        
        print("   üìÑ P√°gina de login carregada")
        print(f"   üåê URL atual: {driver.current_url}")
        print(f"   üìã T√≠tulo: {driver.title}")
        
        # Aguardar e preencher credenciais
        print("   üë§ Preenchendo credenciais...")
        username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
        password_field = wait.until(EC.presence_of_element_located((By.NAME, "password")))
        
        username_field.clear()
        username_field.send_keys("admin")
        password_field.clear()
        password_field.send_keys("admin123")
        
        print("   ‚úÖ Credenciais preenchidas")
        
        # Aguardar e clicar no bot√£o de login
        login_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']")))
        print("   üñ±Ô∏è Clicando no bot√£o de login...")
        login_button.click()
        
        # Aguardar redirecionamento com timeout maior
        print("   ‚è≥ Aguardando redirecionamento...")
        wait = WebDriverWait(driver, 20)
        wait.until(EC.url_contains("/web/app"))
        
        print("‚úÖ Login realizado com sucesso!")
        print(f"   üåê Nova URL: {driver.current_url}")
        return True
        
    except TimeoutException as e:
        print(f"‚ùå Timeout no login: {e}")
        print(f"   üåê URL atual: {driver.current_url}")
        print(f"   üìã T√≠tulo atual: {driver.title}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        print(f"   üåê URL atual: {driver.current_url}")
        print(f"   üìã T√≠tulo atual: {driver.title}")
        return False


def debug_audio_elements(driver):
    """Debug detalhado dos elementos de √°udio."""
    print("\nüîç INICIANDO DEBUG DOS ELEMENTOS DE √ÅUDIO")
    print("=" * 50)
    
    try:
        wait = WebDriverWait(driver, 10)
        
        # 1. Verificar se a p√°gina carregou completamente
        print("1Ô∏è‚É£ Verificando carregamento da p√°gina...")
        page_title = driver.title
        print(f"   T√≠tulo da p√°gina: {page_title}")
        current_url = driver.current_url
        print(f"   URL atual: {current_url}")
        
        # 2. Listar todos os elementos com ID na p√°gina
        print("\n2Ô∏è‚É£ Listando todos os elementos com ID...")
        elements_with_id = driver.find_elements(By.CSS_SELECTOR, "[id]")
        print(f"   Total de elementos com ID: {len(elements_with_id)}")
        for element in elements_with_id:
            element_id = element.get_attribute("id")
            tag_name = element.tag_name
            print(f"   - {tag_name}#{element_id}")
        
        # 3. Verificar especificamente o bot√£o de grava√ß√£o
        print("\n3Ô∏è‚É£ Verificando bot√£o de grava√ß√£o...")
        try:
            record_button = driver.find_element(By.ID, "record-button")
            print("   ‚úÖ Elemento #record-button encontrado!")
            print(f"   - Tag: {record_button.tag_name}")
            print(f"   - Texto: '{record_button.text}'")
            print(f"   - Vis√≠vel: {record_button.is_displayed()}")
            print(f"   - Habilitado: {record_button.is_enabled()}")
            print(f"   - Classes CSS: {record_button.get_attribute('class')}")
            
            # Tentar clicar no bot√£o
            print("\n   üñ±Ô∏è Tentando clicar no bot√£o...")
            if record_button.is_displayed() and record_button.is_enabled():
                record_button.click()
                print("   ‚úÖ Clique realizado com sucesso!")
                time.sleep(2)
                
                # Verificar mudan√ßas no bot√£o ap√≥s clique
                new_text = record_button.text
                new_classes = record_button.get_attribute('class')
                print(f"   - Novo texto: '{new_text}'")
                print(f"   - Novas classes: {new_classes}")
            else:
                print("   ‚ùå Bot√£o n√£o est√° vis√≠vel ou habilitado")
                
        except NoSuchElementException:
            print("   ‚ùå Elemento #record-button N√ÉO encontrado!")
        
        # 4. Verificar elementos de preview de √°udio
        print("\n4Ô∏è‚É£ Verificando elementos de preview de √°udio...")
        try:
            audio_preview = driver.find_element(By.ID, "audio-preview")
            print("   ‚úÖ Elemento #audio-preview encontrado!")
            print(f"   - Vis√≠vel: {audio_preview.is_displayed()}")
            print(f"   - Hidden: {audio_preview.get_attribute('hidden')}")
            
            # Verificar elemento audio dentro do preview
            try:
                audio_element = audio_preview.find_element(By.TAG_NAME, "audio")
                print("   ‚úÖ Elemento <audio> encontrado dentro do preview!")
                print(f"   - Src: {audio_element.get_attribute('src')}")
                print(f"   - Controls: {audio_element.get_attribute('controls')}")
            except NoSuchElementException:
                print("   ‚ùå Elemento <audio> N√ÉO encontrado dentro do preview!")
                
        except NoSuchElementException:
            print("   ‚ùå Elemento #audio-preview N√ÉO encontrado!")
        
        # 5. Verificar input de arquivo de √°udio
        print("\n5Ô∏è‚É£ Verificando input de arquivo de √°udio...")
        try:
            audio_input = driver.find_element(By.ID, "audio-file")
            print("   ‚úÖ Elemento #audio-file encontrado!")
            print(f"   - Type: {audio_input.get_attribute('type')}")
            print(f"   - Accept: {audio_input.get_attribute('accept')}")
            print(f"   - Hidden: {audio_input.get_attribute('hidden')}")
        except NoSuchElementException:
            print("   ‚ùå Elemento #audio-file N√ÉO encontrado!")
        
        # 6. Verificar console do navegador
        print("\n6Ô∏è‚É£ Verificando logs do console...")
        logs = driver.get_log('browser')
        if logs:
            print(f"   Total de logs: {len(logs)}")
            for log in logs[-5:]:  # √öltimos 5 logs
                print(f"   - [{log['level']}] {log['message']}")
        else:
            print("   Nenhum log encontrado no console")
        
        # 7. Verificar se JavaScript est√° funcionando
        print("\n7Ô∏è‚É£ Verificando JavaScript...")
        try:
            # Executar JavaScript simples para verificar se est√° funcionando
            result = driver.execute_script("return document.getElementById('record-button') !== null;")
            print(f"   JavaScript pode encontrar #record-button: {result}")
            
            # Verificar se as vari√°veis globais do app.js existem
            recording_state = driver.execute_script("return typeof recording !== 'undefined' ? recording : 'undefined';")
            print(f"   Vari√°vel 'recording': {recording_state}")
            
            media_recorder_state = driver.execute_script("return typeof mediaRecorder !== 'undefined' ? (mediaRecorder === null ? 'null' : 'exists') : 'undefined';")
            print(f"   Vari√°vel 'mediaRecorder': {media_recorder_state}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao executar JavaScript: {e}")
        
        print("\n" + "=" * 50)
        print("üèÅ DEBUG CONCLU√çDO")
        
    except Exception as e:
        print(f"‚ùå Erro durante debug: {e}")


def main():
    """Fun√ß√£o principal."""
    driver = None
    
    try:
        print("üöÄ Iniciando debug dos elementos de √°udio...")
        
        # Configurar driver
        driver = setup_driver()
        
        # Fazer login
        if not login_to_sparkone(driver):
            return
        
        # Aguardar carregamento completo
        time.sleep(3)
        
        # Executar debug
        debug_audio_elements(driver)
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            print("\nüîí Fechando navegador...")
            driver.quit()


if __name__ == "__main__":
    main()