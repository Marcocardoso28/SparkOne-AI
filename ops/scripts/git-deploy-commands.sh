#!/usr/bin/env bash
# SparkOne Git Deploy Commands
# Version: v1.1.0
# Description: Creates production tag and pushes to remote

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

VERSION="v1.1.0-production-ready"
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

echo -e "${GREEN}🏷️  SparkOne Git Deploy Commands${NC}"
echo -e "Version: ${VERSION}"
echo -e "Timestamp: ${TIMESTAMP}\n"

# Check if git is available
if ! command -v git &> /dev/null; then
    echo -e "${RED}❌ Git is not installed${NC}"
    exit 1
fi

# Check if we're in a git repository
if [ ! -d .git ]; then
    echo -e "${RED}❌ Not a git repository${NC}"
    exit 1
fi

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${YELLOW}📍 Current branch: ${CURRENT_BRANCH}${NC}"

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo -e "${YELLOW}⚠️  You have uncommitted changes${NC}"
    echo -e "Uncommitted files:"
    git status --short
    read -p "Continue anyway? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}❌ Aborted${NC}"
        exit 1
    fi
fi

# Get current commit hash
COMMIT_HASH=$(git rev-parse HEAD)
SHORT_HASH=$(git rev-parse --short HEAD)

echo -e "\n${GREEN}📊 Current State:${NC}"
echo -e "  Commit: ${SHORT_HASH} (${COMMIT_HASH})"
echo -e "  Branch: ${CURRENT_BRANCH}"

# Check if tag already exists
if git rev-parse "${VERSION}" >/dev/null 2>&1; then
    echo -e "\n${YELLOW}⚠️  Tag ${VERSION} already exists${NC}"
    read -p "Delete and recreate? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git tag -d "${VERSION}"
        echo -e "${GREEN}✅ Deleted existing tag${NC}"
    else
        echo -e "${RED}❌ Aborted${NC}"
        exit 1
    fi
fi

# Create annotated tag
echo -e "\n${GREEN}🏷️  Creating tag ${VERSION}...${NC}"
git tag -a "${VERSION}" -m "SparkOne v1.1.0 Production Ready

Status: Pre-Production Freeze
Confidence: 75% (Target: 99.5%)
Date: ${TIMESTAMP}

Features:
- ✅ Core architecture (FastAPI + PostgreSQL + Redis)
- ✅ Security middleware complete
- ✅ 2FA TOTP with backup codes
- ✅ Password hashing (bcrypt)
- ✅ Health checks and metrics
- ⚠️ JWT Auth partial (40%)
- ❌ ProactivityEngine pending
- ❌ Test coverage 35% (target: >80%)

Blockers:
- RF-015: ProactivityEngine (13 SP)
- RNF-020: JWT Auth completion (8 SP)
- Test Coverage gap (45 points)

Next Review: 2025-10-11
"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Tag created successfully${NC}"
else
    echo -e "${RED}❌ Failed to create tag${NC}"
    exit 1
fi

# Show tag info
echo -e "\n${GREEN}📋 Tag Information:${NC}"
git show "${VERSION}" --no-patch

# Push tag to remote
echo -e "\n${GREEN}📤 Pushing tag to remote...${NC}"
read -p "Push tag '${VERSION}' to origin? (y/N) " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    git push origin "${VERSION}"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Tag pushed successfully${NC}"
    else
        echo -e "${RED}❌ Failed to push tag${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}⚠️  Tag created locally but not pushed${NC}"
fi

# Verify tag on remote
echo -e "\n${GREEN}🔍 Verifying tag on remote...${NC}"
if git ls-remote --tags origin | grep -q "${VERSION}"; then
    echo -e "${GREEN}✅ Tag verified on remote${NC}"
else
    echo -e "${YELLOW}⚠️  Tag not found on remote (might not have been pushed)${NC}"
fi

# Generate summary
echo -e "\n${GREEN}📊 Deployment Summary:${NC}"
echo -e "  Tag: ${VERSION}"
echo -e "  Commit: ${SHORT_HASH}"
echo -e "  Branch: ${CURRENT_BRANCH}"
echo -e "  Timestamp: ${TIMESTAMP}"
echo -e "  Status: ✅ SUCCESS"

# Save log
LOG_FILE="docs/reports/ops/GIT_PUSH_LOG.md"
mkdir -p "$(dirname "${LOG_FILE}")"

cat > "${LOG_FILE}" << EOF
# Git Push Log - SparkOne v1.1.0

**Date:** ${TIMESTAMP}  
**Version:** ${VERSION}  
**Status:** ✅ SUCCESS

---

## Deployment Details

- **Commit Hash:** \`${COMMIT_HASH}\`
- **Short Hash:** \`${SHORT_HASH}\`
- **Branch:** \`${CURRENT_BRANCH}\`
- **Tag:** \`${VERSION}\`
- **Tag Pushed:** $([ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ] && echo "✅ YES" || echo "⚠️ LOCAL ONLY")

---

## Git Status

\`\`\`
$(git log -1 --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate: %ad%nMessage: %s" HEAD)
\`\`\`

---

## Tag Information

\`\`\`
$(git show ${VERSION} --no-patch)
\`\`\`

---

## Remote Verification

$(git ls-remote --tags origin | grep "${VERSION}" || echo "Tag not found on remote")

---

**Generated by:** MCP Orchestrator Agent  
**Log File:** \`${LOG_FILE}\`
EOF

echo -e "${GREEN}✅ Log saved to: ${LOG_FILE}${NC}"

echo -e "\n${GREEN}🎉 Git deploy completed successfully!${NC}"

