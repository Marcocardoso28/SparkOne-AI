version: '3.9'
services:
  traefik:
    image: traefik:v3.0
    command:
    - --api.dashboard=true
    - --api.insecure=false
    - --providers.docker=true
    - --providers.docker.exposedbydefault=false
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --entrypoints.web.http.redirections.entrypoint.to=websecure
    - --entrypoints.web.http.redirections.entrypoint.scheme=https
    - --entrypoints.web.http.redirections.entrypoint.permanent=true
    - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
    - --certificatesresolvers.letsencrypt.acme.email=admin@yourdomain.com
    - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    - --log.level=INFO
    - --accesslog=true
    - --metrics.prometheus=true
    - --metrics.prometheus.addEntryPointsLabels=true
    - --metrics.prometheus.addServicesLabels=true
    ports:
    - 80:80
    - 443:443
    - 8080:8080
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./ops/traefik/letsencrypt:/letsencrypt
    - ./ops/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
    - ./ops/traefik/dynamic:/etc/traefik/dynamic:ro
    networks:
    - sparkone-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)
    - traefik.http.routers.traefik.entrypoints=websecure
    - traefik.http.routers.traefik.tls.certresolver=letsencrypt
    - traefik.http.routers.traefik.service=api@internal
    - traefik.http.routers.traefik.middlewares=auth
    - traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$8K1p/a0dL2Lz8bEj8K1p/a0dL2Lz8bEj8K1p/a0dL2Lz8bEj8K1p/a0dL2Lz8bEj
  api:
    build: .
    command: uvicorn src.app.main:app --host 0.0.0.0 --port 8000 --workers 2
    env_file: .env
    environment:
    - TZ=${TZ:-America/Sao_Paulo}
    - PYTHONPATH=src
    volumes:
    - ./uploads:/app/uploads
    - ./secrets:/secrets:ro
    depends_on:
    - redis
    networks:
    - sparkone-network
    - reverse-proxy
    labels:
    - traefik.enable=true
    - traefik.docker.network=reverse-proxy
    - traefik.http.middlewares.rate-limit.ratelimit.average=50
    - traefik.http.middlewares.rate-limit.ratelimit.burst=100
    - traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-For=
    - traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https
    - traefik.http.routers.api.entrypoints=websecure
    - traefik.http.routers.api.middlewares=security-headers,rate-limit
    - traefik.http.routers.api.rule=Host(`yourdomain.com`) || Host(`www.yourdomain.com`)
    - traefik.http.routers.api.service=api
    - traefik.http.routers.api.tls.certresolver=letsencrypt
    - traefik.http.routers.sparkone-api.entrypoints=websecure
    - traefik.http.routers.sparkone-api.rule=Host(`sparkone-ai.macspark.dev`)
    - traefik.http.routers.sparkone-api.tls=true
    - traefik.http.services.api.loadbalancer.server.port=8000
    - traefik.http.services.sparkone-api.loadbalancer.server.port=8000
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  worker:
    build: .
    command: python -m src.app.workers.scheduler
    env_file: .env
    environment:
    - TZ=${TZ:-America/Sao_Paulo}
    volumes:
    - ./uploads:/app/uploads
    - ./secrets:/secrets:ro
    depends_on:
    - redis
    networks:
    - sparkone-network
    restart: unless-stopped
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
    - redis_data:/data
    networks:
    - sparkone-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 30s
      timeout: 10s
      retries: 3
  prometheus:
    image: prom/prometheus:latest
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=30d
    - --web.enable-lifecycle
    - --web.enable-admin-api
    volumes:
    - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - ./ops/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    - prometheus_data:/prometheus
    networks:
    - sparkone-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.prometheus.rule=Host(`prometheus.yourdomain.com`)
    - traefik.http.routers.prometheus.entrypoints=websecure
    - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
    - traefik.http.routers.prometheus.service=prometheus
    - traefik.http.services.prometheus.loadbalancer.server.port=9090
    - traefik.http.routers.prometheus.middlewares=auth
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin123
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_SERVER_ROOT_URL=https://grafana.yourdomain.com
    - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
    - grafana_data:/var/lib/grafana
    - ./ops/grafana/dashboard-overview.json:/etc/grafana/provisioning/dashboards/dashboard-overview.json:ro
    networks:
    - sparkone-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)
    - traefik.http.routers.grafana.entrypoints=websecure
    - traefik.http.routers.grafana.tls.certresolver=letsencrypt
    - traefik.http.routers.grafana.service=grafana
    - traefik.http.services.grafana.loadbalancer.server.port=3000
    restart: unless-stopped
  alertmanager:
    image: prom/alertmanager:latest
    command:
    - --config.file=/etc/alertmanager/alertmanager.yml
    - --storage.path=/alertmanager
    - --web.external-url=https://alertmanager.yourdomain.com
    volumes:
    - ./ops/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    - alertmanager_data:/alertmanager
    networks:
    - sparkone-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.alertmanager.rule=Host(`alertmanager.yourdomain.com`)
    - traefik.http.routers.alertmanager.entrypoints=websecure
    - traefik.http.routers.alertmanager.tls.certresolver=letsencrypt
    - traefik.http.routers.alertmanager.service=alertmanager
    - traefik.http.services.alertmanager.loadbalancer.server.port=9093
    - traefik.http.routers.alertmanager.middlewares=auth
    restart: unless-stopped
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
    - COLLECTOR_OTLP_ENABLED=true
    - SPAN_STORAGE_TYPE=memory
    networks:
    - sparkone-network
    labels:
    - traefik.enable=true
    - traefik.http.routers.jaeger.rule=Host(`jaeger.yourdomain.com`)
    - traefik.http.routers.jaeger.entrypoints=websecure
    - traefik.http.routers.jaeger.tls.certresolver=letsencrypt
    - traefik.http.routers.jaeger.service=jaeger
    - traefik.http.services.jaeger.loadbalancer.server.port=16686
    - traefik.http.routers.jaeger.middlewares=auth
    restart: unless-stopped
volumes:
  redis_data: null
  prometheus_data: null
  grafana_data: null
  alertmanager_data: null
networks:
  sparkone-network:
    driver: bridge
  reverse-proxy:
    external: true
    name: reverse-proxy
