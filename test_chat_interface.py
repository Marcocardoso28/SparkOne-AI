#!/usr/bin/env python3
"""
Script para testar todas as funcionalidades da interface de chat do SparkOne
usando Selenium WebDriver.
"""

import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import requests

def setup_driver():
    """Configura o driver do Chrome com op√ß√µes otimizadas."""
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1280,720")
    # Remover --headless para ver o navegador em a√ß√£o
    
    driver = webdriver.Chrome(options=chrome_options)
    driver.implicitly_wait(10)
    return driver

def login_to_app(driver):
    """Realiza o login na aplica√ß√£o."""
    print("üîê Realizando login...")
    
    try:
        # Navegar para a p√°gina de login
        print("üìç Navegando para p√°gina de login...")
        driver.get("http://localhost:8000/web/login")
        time.sleep(3)
        
        print("üîç Procurando campos de login...")
        # Aguardar campos aparecerem
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        
        # Preencher credenciais
        username_field = driver.find_element(By.NAME, "username")
        password_field = driver.find_element(By.NAME, "password")
        
        print("‚úèÔ∏è Preenchendo credenciais...")
        username_field.clear()
        username_field.send_keys("user")
        password_field.clear()
        password_field.send_keys("sparkone-dev")
        
        # Clicar no bot√£o de login
        print("üîò Clicando no bot√£o de login...")
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        login_button.click()
        
        # Aguardar redirecionamento
        print("‚è≥ Aguardando redirecionamento...")
        WebDriverWait(driver, 15).until(
            EC.url_contains("/web/app")
        )
        
        print("‚úÖ Login realizado com sucesso!")
        return True
        
    except TimeoutException as e:
        print(f"‚è∞ Timeout durante login: {e}")
        print(f"üåê URL atual: {driver.current_url}")
        return False
    except NoSuchElementException as e:
        print(f"üîç Elemento n√£o encontrado: {e}")
        print("üìÑ HTML da p√°gina:")
        print(driver.page_source[:500] + "...")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante login: {e}")
        print(f"üåê URL atual: {driver.current_url}")
        return False

def test_page_load(driver):
    """Testa se a p√°gina principal carrega corretamente."""
    print("\nüìÑ Testando carregamento da p√°gina...")
    
    try:
        # Verificar se estamos na p√°gina correta
        current_url = driver.current_url
        assert "/web/app" in current_url, f"URL incorreta: {current_url}"
        
        # Verificar t√≠tulo da p√°gina
        title = driver.title
        print(f"üìã T√≠tulo da p√°gina: {title}")
        
        # Aguardar elementos principais carregarem
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        print("‚úÖ P√°gina carregada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no carregamento da p√°gina: {e}")
        return False

def test_chat_interface_elements(driver):
    """Testa se os elementos da interface de chat est√£o presentes."""
    print("\nüé® Testando elementos da interface...")
    
    elements_to_check = [
        ("Campo de entrada de texto", "input[type='text'], textarea, [contenteditable]"),
        ("Bot√£o de envio", "button[type='submit'], button:contains('Enviar'), .send-button"),
        ("√Årea de mensagens", ".messages, .chat-messages, .conversation"),
        ("Bot√£o de upload", "input[type='file'], .upload-button, .file-input"),
    ]
    
    found_elements = []
    
    for name, selector in elements_to_check:
        try:
            # Tentar diferentes seletores
            selectors = selector.split(", ")
            element_found = False
            
            for sel in selectors:
                try:
                    if ":contains(" in sel:
                        # Para seletores com :contains, usar XPath
                        text = sel.split(":contains('")[1].split("')")[0]
                        xpath_selector = f"//*[contains(text(), '{text}')]"
                        elements = driver.find_elements(By.XPATH, xpath_selector)
                    else:
                        elements = driver.find_elements(By.CSS_SELECTOR, sel)
                    
                    if elements:
                        found_elements.append((name, sel, len(elements)))
                        element_found = True
                        break
                except:
                    continue
            
            if element_found:
                print(f"‚úÖ {name}: Encontrado")
            else:
                print(f"‚ö†Ô∏è  {name}: N√£o encontrado")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar {name}: {e}")
    
    return found_elements

def test_text_input(driver):
    """Testa a funcionalidade de entrada de texto."""
    print("\nüí¨ Testando entrada de texto...")
    
    try:
        # Procurar campo de entrada de texto
        text_inputs = driver.find_elements(By.CSS_SELECTOR, 
            "input[type='text'], textarea, [contenteditable='true']")
        
        if not text_inputs:
            print("‚ö†Ô∏è  Campo de entrada de texto n√£o encontrado")
            return False
        
        # Usar o primeiro campo encontrado
        text_input = text_inputs[0]
        
        # Testar digita√ß√£o
        test_message = "Ol√°! Este √© um teste da funcionalidade de chat."
        text_input.clear()
        text_input.send_keys(test_message)
        
        # Verificar se o texto foi inserido
        if text_input.get_attribute("value") == test_message or text_input.text == test_message:
            print("‚úÖ Texto inserido com sucesso!")
            
            # Tentar enviar a mensagem
            try:
                # Procurar bot√£o de envio
                send_buttons = driver.find_elements(By.CSS_SELECTOR, 
                    "button[type='submit'], .send-button, button:contains('Enviar')")
                
                if send_buttons:
                    send_buttons[0].click()
                    print("‚úÖ Mensagem enviada!")
                    time.sleep(2)  # Aguardar processamento
                else:
                    # Tentar Enter
                    text_input.send_keys(Keys.RETURN)
                    print("‚úÖ Mensagem enviada com Enter!")
                    time.sleep(2)
                
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao enviar mensagem: {e}")
                return False
        else:
            print("‚ùå Falha ao inserir texto")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de entrada de texto: {e}")
        return False

def test_file_upload(driver):
    """Testa a funcionalidade de upload de arquivos."""
    print("\nüìé Testando upload de arquivos...")
    
    try:
        # Procurar input de arquivo
        file_inputs = driver.find_elements(By.CSS_SELECTOR, "input[type='file']")
        
        if not file_inputs:
            print("‚ö†Ô∏è  Campo de upload n√£o encontrado")
            return False
        
        # Criar um arquivo de teste tempor√°rio
        test_file_path = os.path.join(os.getcwd(), "test_image.txt")
        with open(test_file_path, "w") as f:
            f.write("Este √© um arquivo de teste para upload.")
        
        try:
            # Fazer upload do arquivo
            file_input = file_inputs[0]
            file_input.send_keys(test_file_path)
            
            print("‚úÖ Arquivo selecionado para upload!")
            time.sleep(2)
            
            # Limpar arquivo de teste
            os.remove(test_file_path)
            
            return True
            
        except Exception as e:
            # Limpar arquivo de teste em caso de erro
            if os.path.exists(test_file_path):
                os.remove(test_file_path)
            print(f"‚ùå Erro no upload: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de upload: {e}")
        return False

def test_ui_responsiveness(driver):
    """Testa a responsividade da interface."""
    print("\nüì± Testando responsividade...")
    
    # Tamanhos de tela para testar
    screen_sizes = [
        (1920, 1080, "Desktop Grande"),
        (1280, 720, "Desktop Padr√£o"),
        (768, 1024, "Tablet"),
        (375, 667, "Mobile")
    ]
    
    for width, height, device in screen_sizes:
        try:
            driver.set_window_size(width, height)
            time.sleep(1)
            
            # Verificar se a p√°gina ainda est√° acess√≠vel
            body = driver.find_element(By.TAG_NAME, "body")
            if body:
                print(f"‚úÖ {device} ({width}x{height}): OK")
            else:
                print(f"‚ùå {device} ({width}x{height}): Problema")
                
        except Exception as e:
            print(f"‚ùå {device} ({width}x{height}): Erro - {e}")
    
    # Restaurar tamanho padr√£o
    driver.set_window_size(1280, 720)
    return True

def capture_page_info(driver):
    """Captura informa√ß√µes gerais da p√°gina."""
    print("\nüìä Informa√ß√µes da p√°gina:")
    
    try:
        print(f"üåê URL atual: {driver.current_url}")
        print(f"üìã T√≠tulo: {driver.title}")
        
        # Contar elementos
        all_elements = driver.find_elements(By.CSS_SELECTOR, "*")
        inputs = driver.find_elements(By.CSS_SELECTOR, "input, textarea, [contenteditable]")
        buttons = driver.find_elements(By.CSS_SELECTOR, "button")
        
        print(f"üî¢ Total de elementos: {len(all_elements)}")
        print(f"üìù Campos de entrada: {len(inputs)}")
        print(f"üîò Bot√µes: {len(buttons)}")
        
        # Capturar screenshot
        screenshot_path = "chat_interface_screenshot.png"
        driver.save_screenshot(screenshot_path)
        print(f"üì∏ Screenshot salvo: {screenshot_path}")
        
    except Exception as e:
        print(f"‚ùå Erro ao capturar informa√ß√µes: {e}")

def main():
    """Fun√ß√£o principal que executa todos os testes."""
    print("üöÄ Iniciando testes da interface de chat do SparkOne...")
    
    driver = None
    try:
        # Configurar driver
        driver = setup_driver()
        
        # Realizar login
        if not login_to_app(driver):
            print("‚ùå Falha no login. Abortando testes.")
            return
        
        # Executar testes
        test_page_load(driver)
        test_chat_interface_elements(driver)
        test_text_input(driver)
        test_file_upload(driver)
        test_ui_responsiveness(driver)
        capture_page_info(driver)
        
        print("\nüéâ Testes conclu√≠dos!")
        print("‚è≥ Aguardando 10 segundos para visualiza√ß√£o...")
        time.sleep(10)
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        
    finally:
        if driver:
            driver.quit()
            print("üîö Navegador fechado.")

if __name__ == "__main__":
    main()