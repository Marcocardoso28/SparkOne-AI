{
  "meta": {
    "project": "SparkOne",
    "date": "2025-10-04",
    "prepared_by": "Generated by Assistant"
  },
  "product_overview": "SparkOne is a modular personal assistant AI system inspired by Jarvis, designed to integrate multiple communication channels and external services to provide a personalized and proactive conversational experience. It offers task management, calendar synchronization, coaching, and structured daily briefs through a flexible, secure, and scalable platform.",
  "core_goals": [
    "Create a modular personal assistant serving as a digital 'second brain'.",
    "Integrate multiple communication channels including WhatsApp Evolution API, Web, Google Sheets, and REST APIs.",
    "Provide intelligent orchestration for contextual message processing via the Agno bridge.",
    "Maintain flexible architecture for extensibility and local/offline deployment capability.",
    "Ensure robust security with HTTP Basic auth, JWT planned, and comprehensive logging and rate limiting."
  ],
  "key_features": [
    "Multi-channel input support (WhatsApp, Web, Google Sheets, direct REST ingestion).",
    "Complete task management system with listing, filtering, creation, and updating of tasks, including Notion sync.",
    "Calendar integration supporting Google Calendar and CalDAV for event management.",
    "Personal coaching service offering text corrections and motivational guidance.",
    "Structured daily briefs delivering summarized task and event insights.",
    "Webhook endpoints for external notifications (e.g., WhatsApp Evolution API).",
    "Comprehensive health checks for system, database, and Redis connectivity.",
    "Security-focused middlewares with rate limiting, security headers, input sanitization, and authentication.",
    "Planned advanced features including Proactivity Engine for reminders, Recommendation Service integration, and vector search implementation."
  ],
  "user_flow_summary": [
    "User logs in via HTTP Basic (with plans for JWT and 2FA support).",
    "User sends messages or tasks via multiple channels (WhatsApp webhook, web interface, Google Sheets ingestion, or direct REST API).",
    "Messages are classified by the Agno bridge and routed intelligently to appropriate services.",
    "User creates, updates, or views tasks using the Task Management API with filtering and pagination.",
    "Calendar events can be synchronized and managed through integrated Google Calendar and CalDAV APIs.",
    "User receives structured daily briefs summarizing tasks, events, and recommendations.",
    "Health check endpoints allow monitoring system and service status.",
    "Admins manage communication channels through channel management APIs to configure and update channel settings."
  ],
  "validation_criteria": [
    "All APIs respond within 2 seconds at 95th percentile under expected load.",
    "Health check endpoints report accurate system, database, and Redis status consistently.",
    "Authentication enforced with HTTP Basic for web UI and JWT support planned; unauthorized access is denied.",
    "Task APIs allow CRUD operations with valid input validation and return correct filtered/paginated data.",
    "Webhook endpoints accept and validate external notifications correctly, responding with proper success or error codes.",
    "System supports multi-worker deployment with Redis caching and maintains less than 1% error rate in production.",
    "Logging includes structured correlation IDs without leaking sensitive information.",
    "Security headers and rate limiting are active and validated through test scenarios.",
    "Test coverage is above 85% covering core functionalities and security aspects.",
    "System integrates gracefully with Google Calendar, CalDAV, and Notion sync per specifications."
  ],
  "code_summary": {
    "tech_stack": [
      "Python",
      "FastAPI",
      "SQLite",
      "SQLAlchemy",
      "Alembic",
      "Pydantic",
      "Uvicorn",
      "JWT",
      "Redis",
      "Docker",
      "Playwright",
      "Pytest"
    ],
    "features": [
      {
        "name": "Health Check API",
        "description": "System health monitoring endpoints for general system status, database connectivity, and Redis connectivity",
        "files": [
          "src/app/routers/health.py",
          "src/app/services/health.py"
        ],
        "api_doc": {
          "paths": {
            "/health": {
              "get": {
                "summary": "Get system health status",
                "responses": {
                  "200": {
                    "description": "System health information",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            },
                            "environment": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/health/database": {
              "get": {
                "summary": "Get database health status",
                "responses": {
                  "200": {
                    "description": "Database health information",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "database": {
                              "type": "string"
                            },
                            "connected": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/health/redis": {
              "get": {
                "summary": "Get Redis health status",
                "responses": {
                  "200": {
                    "description": "Redis health information",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "redis": {
                              "type": "string"
                            },
                            "connected": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Task Management API",
        "description": "Complete task management system with CRUD operations for creating, listing, and updating tasks",
        "files": [
          "src/app/routers/tasks.py",
          "src/app/models/db/tasks.py",
          "src/app/models/db/repositories.py",
          "src/app/schemas/tasks.py"
        ],
        "api_doc": {
          "paths": {
            "/tasks": {
              "get": {
                "summary": "List tasks with filtering and pagination",
                "parameters": [
                  {
                    "name": "status",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Filter tasks by status"
                  },
                  {
                    "name": "channel",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    },
                    "description": "Filter tasks by channel"
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    },
                    "description": "Number of tasks to return"
                  },
                  {
                    "name": "offset",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    },
                    "description": "Number of tasks to skip"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of tasks",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "tasks": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "title": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "priority": {
                                    "type": "string"
                                  },
                                  "due_date": {
                                    "type": "string"
                                  },
                                  "channel": {
                                    "type": "string"
                                  },
                                  "sender": {
                                    "type": "string"
                                  },
                                  "created_at": {
                                    "type": "string"
                                  },
                                  "updated_at": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "total": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "offset": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "post": {
                "summary": "Create a new task",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "due_at": {
                            "type": "string"
                          },
                          "channel": {
                            "type": "string"
                          },
                          "sender": {
                            "type": "string"
                          },
                          "priority": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "title",
                          "channel",
                          "sender"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Task created successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "title": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "priority": {
                              "type": "string"
                            },
                            "due_date": {
                              "type": "string"
                            },
                            "channel": {
                              "type": "string"
                            },
                            "sender": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "400": {
                    "description": "Bad request - invalid data"
                  }
                }
              }
            },
            "/tasks/{task_id}/status": {
              "patch": {
                "summary": "Update task status",
                "parameters": [
                  {
                    "name": "task_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "status"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Task status updated successfully"
                  },
                  "404": {
                    "description": "Task not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Authentication API",
        "description": "User authentication system with login, logout, and 2FA support",
        "files": [
          "src/app/routers/auth.py",
          "src/app/services/auth_2fa.py",
          "src/app/models/db/user.py"
        ],
        "api_doc": {
          "paths": {
            "/auth/login": {
              "post": {
                "summary": "User login",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "token_type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "401": {
                    "description": "Invalid credentials"
                  }
                }
              }
            },
            "/auth/logout": {
              "post": {
                "summary": "User logout",
                "responses": {
                  "302": {
                    "description": "Redirect to login page"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Message Ingestion API",
        "description": "API for ingesting messages from various channels and normalizing them",
        "files": [
          "src/app/routers/ingest.py",
          "src/app/services/message_processor.py"
        ],
        "api_doc": {
          "paths": {
            "/ingest": {
              "post": {
                "summary": "Ingest and process messages",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string"
                          },
                          "channel": {
                            "type": "string"
                          },
                          "sender": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "message",
                          "channel",
                          "sender"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "202": {
                    "description": "Message accepted for processing"
                  },
                  "400": {
                    "description": "Bad request - invalid data"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Channel Management API",
        "description": "API for managing communication channels and normalizing channel-specific payloads",
        "files": [
          "src/app/routers/channels.py",
          "src/app/services/channel_manager.py"
        ],
        "api_doc": {
          "paths": {
            "/channels": {
              "get": {
                "summary": "List available channels",
                "responses": {
                  "200": {
                    "description": "List of available channels",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "post": {
                "summary": "Create or update channel configuration",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "config": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Channel created successfully"
                  },
                  "400": {
                    "description": "Bad request - invalid data"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Webhook API",
        "description": "Webhook endpoints for receiving external notifications, including WhatsApp Evolution API",
        "files": [
          "src/app/routers/webhooks.py",
          "src/app/services/webhook_processor.py"
        ],
        "api_doc": {
          "paths": {
            "/webhooks/whatsapp": {
              "post": {
                "summary": "WhatsApp Evolution API webhook endpoint",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string"
                          },
                          "data": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Webhook processed successfully"
                  },
                  "400": {
                    "description": "Bad request - invalid webhook data"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
